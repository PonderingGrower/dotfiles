let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
map! <S-Insert> *
inoremap <silent> <Plug>delimitMateMRightMouse =delimitMate#Finish(1)<RightMouse>
inoremap <silent> <Plug>delimitMateMLeftMouse =delimitMate#Finish(1)<LeftMouse>
inoremap <silent> <Plug>delimitMateDel =delimitMate#Del()
inoremap <silent> <Plug>delimitMateS-Tab =delimitMate#JumpAny("\<S-Tab>")
inoremap <silent> <Plug>delimitMateSpace =delimitMate#ExpandSpace()
inoremap <silent> <Plug>delimitMateCR =delimitMate#ExpandReturn()
inoremap <silent> <expr> <Plug>delimitMateS-BS delimitMate#WithinEmptyPair() ? "\=delimitMate#Del()\" : "\<S-BS>"
inoremap <silent> <expr> <Plug>delimitMateBS delimitMate#WithinEmptyPair() ? "\=delimitMate#BS()\" : "\<BS>"
inoremap <silent> <Plug>delimitMate` =delimitMate#QuoteDelim("\`")
inoremap <silent> <Plug>delimitMate' =delimitMate#QuoteDelim("\'")
inoremap <silent> <Plug>delimitMate" =delimitMate#QuoteDelim("\"")
inoremap <silent> <Plug>delimitMate] =delimitMate#JumpOut("\]")
inoremap <silent> <Plug>delimitMate} =delimitMate#JumpOut("\}")
inoremap <silent> <Plug>delimitMate) =delimitMate#JumpOut("\)")
inoremap <silent> <Plug>delimitMate[ [=delimitMate#ParenDelim("]")
inoremap <silent> <Plug>delimitMate{ {=delimitMate#ParenDelim("}")
inoremap <silent> <Plug>delimitMate( (=delimitMate#ParenDelim(")")
imap <S-Tab> <Plug>SuperTabBackward
inoremap <C-Tab> 	
inoremap <Right> <Nop>
inoremap <Left> <Nop>
inoremap <Down> <Nop>
inoremap <Up> <Nop>
vnoremap  "+y
noremap  h
nnoremap 	 :CtrlPMixed
noremap <NL> j
noremap  k
noremap  l
nnoremap <silent>  :CtrlP
nnoremap  "+p
map  a
map  mq <Plug>MBEMarkCurrent
map  mbt <Plug>TMiniBufExplorer
map  mbu <Plug>UMiniBufExplorer
map  mbc <Plug>CMiniBufExplorer
map  mbe <Plug>MiniBufExplorer
vnoremap <silent>  w :call EasyMotion#WB(1, 0)
onoremap <silent>  w :call EasyMotion#WB(0, 0)
nnoremap <silent>  w :call EasyMotion#WB(0, 0)
vnoremap <silent>  t :call EasyMotion#T(1, 0)
onoremap <silent>  t :call EasyMotion#T(0, 0)
nnoremap <silent>  t :call EasyMotion#T(0, 0)
vnoremap <silent>  n :call EasyMotion#Search(1, 0)
onoremap <silent>  n :call EasyMotion#Search(0, 0)
nnoremap <silent>  n :call EasyMotion#Search(0, 0)
vnoremap <silent>  k :call EasyMotion#JK(1, 1)
onoremap <silent>  k :call EasyMotion#JK(0, 1)
nnoremap <silent>  k :call EasyMotion#JK(0, 1)
vnoremap <silent>  j :call EasyMotion#JK(1, 0)
onoremap <silent>  j :call EasyMotion#JK(0, 0)
nnoremap <silent>  j :call EasyMotion#JK(0, 0)
vnoremap <silent>  gE :call EasyMotion#EW(1, 1)
onoremap <silent>  gE :call EasyMotion#EW(0, 1)
nnoremap <silent>  gE :call EasyMotion#EW(0, 1)
vnoremap <silent>  f :call EasyMotion#F(1, 0)
onoremap <silent>  f :call EasyMotion#F(0, 0)
nnoremap <silent>  f :call EasyMotion#F(0, 0)
vnoremap <silent>  e :call EasyMotion#E(1, 0)
onoremap <silent>  e :call EasyMotion#E(0, 0)
nnoremap <silent>  e :call EasyMotion#E(0, 0)
vnoremap <silent>  b :call EasyMotion#WB(1, 1)
onoremap <silent>  b :call EasyMotion#WB(0, 1)
nnoremap <silent>  b :call EasyMotion#WB(0, 1)
vnoremap <silent>  W :call EasyMotion#WBW(1, 0)
onoremap <silent>  W :call EasyMotion#WBW(0, 0)
nnoremap <silent>  W :call EasyMotion#WBW(0, 0)
vnoremap <silent>  T :call EasyMotion#T(1, 1)
onoremap <silent>  T :call EasyMotion#T(0, 1)
nnoremap <silent>  T :call EasyMotion#T(0, 1)
vnoremap <silent>  N :call EasyMotion#Search(1, 1)
onoremap <silent>  N :call EasyMotion#Search(0, 1)
nnoremap <silent>  N :call EasyMotion#Search(0, 1)
vnoremap <silent>  ge :call EasyMotion#E(1, 1)
onoremap <silent>  ge :call EasyMotion#E(0, 1)
nnoremap <silent>  ge :call EasyMotion#E(0, 1)
vnoremap <silent>  F :call EasyMotion#F(1, 1)
onoremap <silent>  F :call EasyMotion#F(0, 1)
nnoremap <silent>  F :call EasyMotion#F(0, 1)
vnoremap <silent>  E :call EasyMotion#EW(1, 0)
onoremap <silent>  E :call EasyMotion#EW(0, 0)
nnoremap <silent>  E :call EasyMotion#EW(0, 0)
vnoremap <silent>  B :call EasyMotion#WBW(1, 1)
onoremap <silent>  B :call EasyMotion#WBW(0, 1)
nnoremap <silent>  B :call EasyMotion#WBW(0, 1)
nnoremap    :CtrlPLastMode --dir
nnoremap  pm :CtrlPMRUFiles
nnoremap  pb :CtrlPBuffer
nnoremap  pq :CtrlPQuickfix
nnoremap  pl :CtrlPLine
nnoremap  pt :CtrlPBufTagAll
nnoremap  pp :CtrlP 
nnoremap  v :source ~/.vimrc
nnoremap  V :vsp ~/.vimrc
nnoremap  q :bp|sp|bn|bd
nnoremap  d sl
nnoremap  s vl
nnoremap  r :%s/\s\+$//:let @/='';
nnoremap  ; A;
nnoremap   <Nop>
nmap N Nzz
map Q gq
nmap gx <Plug>NetrwBrowseX
nnoremap gpl :Dispatch git pull
nnoremap gps :Dispatch git push
nnoremap gco :Git checkout
nnoremap gb :Git branch 
nnoremap gm :Gmove 
nnoremap gl :Glog
nnoremap gw :Gwrite
nnoremap gr :Gread
nnoremap ge :Gedit
nnoremap gd :Gdiff
nnoremap gc :Gcommiti
nnoremap gs :Gstatus
nnoremap ga :Git add %
nnoremap j gj
nnoremap k gk
map mm :echohl WildMenu:echon "Compiling file...":silent! Make:bot copen 6<Up>:echohl None:echo ""
nmap n nzz
nnoremap q: :q
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nnoremap <F1> :TagbarToggle
nnoremap <F2> :TMiniBufExplorer
nnoremap <F4> :Dispatch 
nnoremap <F5> :Make
nnoremap <F11> :set guifont=terminus\ 8
nnoremap <F12> :set guifont=Inconsolata\ for\ Powerline\ 12
nnoremap <Right> <Nop>
nnoremap <Left> <Nop>
nnoremap <Down> <Nop>
nnoremap <Up> <Nop>
imap 	 <Plug>SuperTabForward
inoremap  +
inoremap  =GetCloseTag()
cnoremap help rightb vert help
iabbr </ </<BS>
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set background=dark
set backspace=2
set backupdir=~/.vim/backup/
set cinoptions=>4
set clipboard=unnamed
set copyindent
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set guifont=Terminus\ 10
set guioptions=
set helplang=en
set hidden
set hlsearch
set incsearch
set iskeyword=@,48-57,_,192-255,_,$,@,%,#
set laststatus=2
set lazyredraw
set makeprg=make\ clean\ &&\ make\ -j4\ --silent
set modelines=0
set mouse=a
set mousemodel=popup
set pastetoggle=<F8>
set preserveindent
set ruler
set runtimepath=~/.vim/bundle/vundle,~/.vim/bundle/vim-easymotion,~/.vim/bundle/vim-fugitive,~/.vim/bundle/vim-dispatch,~/.vim/bundle/supertab,~/.vim/bundle/tagbar,~/.vim/bundle/minibufexpl.vim,~/.vim/bundle/delimitMate,~/.vim/bundle/ctrlp.vim,~/.vim/bundle/syntastic,~/.vim/bundle/vim-ps1,~/.vim/bundle/closetag.vim,~/.vim/bundle/MatchTagAlways,~/.vim/bundle/vim-startify,~/.vim/bundle/jellybeans.vim,~/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,~/.vim/after,~/.vim/bundle/vundle/,~/.powerline/powerline/bindings/vim/,~/.vim/bundle/vundle/after,~/.vim/bundle/vim-easymotion/after,~/.vim/bundle/vim-fugitive/after,~/.vim/bundle/vim-dispatch/after,~/.vim/bundle/supertab/after,~/.vim/bundle/tagbar/after,~/.vim/bundle/minibufexpl.vim/after,~/.vim/bundle/delimitMate/after,~/.vim/bundle/ctrlp.vim/after,~/.vim/bundle/syntastic/after,~/.vim/bundle/vim-ps1/after,~/.vim/bundle/closetag.vim/after,~/.vim/bundle/MatchTagAlways/after,~/.vim/bundle/vim-startify/after,~/.vim/bundle/jellybeans.vim/after
set scrolloff=5
set shell=zsh
set shiftwidth=4
set shortmess=atI
set showmatch
set smartcase
set smarttab
set softtabstop=4
set spelllang=pl,en
set statusline=%!PowerlineNew()
set suffixes=.bak,~,.o,.h,.info,.swp,.obj,.info,.aux,.log,.dvi,.bbl,.out,.o,.lo
set noswapfile
set tabstop=4
set tags=tags;/
set termencoding=utf-8
set title
set ttimeoutlen=100
set undodir=~/.vim/undo
set undofile
set undolevels=100
set undoreload=1000
set updatetime=300
set visualbell
set wildignore=.so,swp,.zip,.mp3,.bak,.pyc,.o,.ojb,.,a,ojb.pdf,.jpg,.gif,.png,.avi,.mkv,.so,.out
set wildignorecase
set wildmenu
set wildmode=list:full
set window=74
set winheight=20
set winwidth=75
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
silent! argdel *
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe 'vert 1resize ' . ((&columns * 82 + 93) / 186)
exe 'vert 2resize ' . ((&columns * 103 + 93) / 186)
argglobal
enew
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <RightMouse> <Plug>delimitMateMRightMouse
imap <buffer> <LeftMouse> <Plug>delimitMateMLeftMouse
imap <buffer> <S-Up> <Plug>delimitMateS-Up
imap <buffer> <S-Down> <Plug>delimitMateS-Down
imap <buffer> <PageDown> <Plug>delimitMatePageDown
imap <buffer> <PageUp> <Plug>delimitMatePageUp
imap <buffer> <C-Right> <Plug>delimitMateC-Right
imap <buffer> <C-Left> <Plug>delimitMateC-Left
imap <buffer> <End> <Plug>delimitMateEnd
imap <buffer> <Home> <Plug>delimitMateHome
imap <buffer> <Del> <Plug>delimitMateDel
imap <buffer> <S-BS> <Plug>delimitMateS-BS
imap <buffer> <BS> <Plug>delimitMateBS
inoremap <buffer> <Plug>delimitMateJumpMany =len(b:_l_delimitMate_buffer) ? delimitMate#Finish(0) : delimitMate#JumpMany()
imap <buffer> <C-ScrollWheelRight> <Plug>delimitMateC-ScrollWheelRight
imap <buffer> <S-ScrollWheelRight> <Plug>delimitMateS-ScrollWheelRight
imap <buffer> <ScrollWheelRight> <Plug>delimitMateScrollWheelRight
imap <buffer> <C-ScrollWheelLeft> <Plug>delimitMateC-ScrollWheelLeft
imap <buffer> <S-ScrollWheelLeft> <Plug>delimitMateS-ScrollWheelLeft
imap <buffer> <ScrollWheelLeft> <Plug>delimitMateScrollWheelLeft
imap <buffer> <C-ScrollWheelDown> <Plug>delimitMateC-ScrollWheelDown
imap <buffer> <S-ScrollWheelDown> <Plug>delimitMateS-ScrollWheelDown
imap <buffer> <ScrollWheelDown> <Plug>delimitMateScrollWheelDown
imap <buffer> <C-ScrollWheelUp> <Plug>delimitMateC-ScrollWheelUp
imap <buffer> <S-ScrollWheelUp> <Plug>delimitMateS-ScrollWheelUp
imap <buffer> <ScrollWheelUp> <Plug>delimitMateScrollWheelUp
nnoremap <buffer> <silent>  :normal 
nnoremap <buffer> 0 :edit /usr/src/linux-3.8.1-pf/kernel/exit.c
nnoremap <buffer> 1 :edit ~/.vimrc
nnoremap <buffer> 2 :edit ~/.config/awesome/rc.lua
nnoremap <buffer> 3 :edit /usr/share/vim/vim73/doc/motion.txt
nnoremap <buffer> 4 :edit ~/bin/urxvtb
nnoremap <buffer> 5 :edit ~/.Xdefaults
nnoremap <buffer> 6 :edit ~/.gitignore
nnoremap <buffer> 7 :edit ~/.vim/undo/.gitignore
nnoremap <buffer> 8 :edit ~/.vim/backup/.gitignore
nnoremap <buffer> 9 :edit /usr/src/linux-3.8.1-pf/include/linux/sched.h
nnoremap <buffer> <silent> e :enew
nnoremap <buffer> q :quit
imap <buffer> <silent> g <Plug>delimitMateJumpMany
imap <buffer> " <Plug>delimitMate"
imap <buffer> ' <Plug>delimitMate'
imap <buffer> ( <Plug>delimitMate(
imap <buffer> ) <Plug>delimitMate)
imap <buffer> [ <Plug>delimitMate[
imap <buffer> ] <Plug>delimitMate]
imap <buffer> ` <Plug>delimitMate`
imap <buffer> { <Plug>delimitMate{
imap <buffer> } <Plug>delimitMate}
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=wipe
setlocal nobuflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=>4
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal copyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=%*[^\"]\"%f\"%*\\D%l:%c:\ %m,%*[^\"]\"%f\"%*\\D%l:\ %m,\"%f\"%*\\D%l:%c:\ %m,\"%f\"%*\\D%l:\ %m,%-G%f:%l:\ %trror:\ (Each\ undeclared\ identifier\ is\ reported\ only\ once,%-G%f:%l:\ %trror:\ for\ each\ function\ it\ appears\ in.),%f:%l:%c:\ %trror:\ %m,%f:%l:%c:\ %tarning:\ %m,%f:%l:%c:\ %m,%f:%l:\ %trror:\ %m,%f:%l:\ %tarning:\ %m,%f:%l:\ %m,\"%f\"\\,\ line\ %l%*\\D%c%*[^\ ]\ %m,%D%*\\a[%*\\d]:\ Entering\ directory\ `%f',%X%*\\a[%*\\d]:\ Leaving\ directory\ `%f',%D%*\\a:\ Entering\ directory\ `%f',%X%*\\a:\ Leaving\ directory\ `%f',%DMaking\ %*\\a\ in\ %f
setlocal expandtab
if &filetype != 'startify'
setlocal filetype=startify
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=5
setlocal foldlevel=5
setlocal foldmarker={{{,}}}
set foldmethod=syntax
setlocal foldmethod=syntax
setlocal foldminlines=1
set foldnestmax=2
setlocal foldnestmax=2
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,_,$,@,%,#
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
setlocal nonumber
set numberwidth=5
setlocal numberwidth=5
setlocal omnifunc=
setlocal path=
setlocal preserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=pl,en
setlocal statusline=%!Powerline(1)
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'startify'
setlocal syntax=startify
endif
setlocal tabstop=4
setlocal tags=~/.git/tags,tags;/
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
wincmd w
argglobal
edit ~/.vim/bundle/vim-startify/doc/startify.txt
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <RightMouse> <Plug>delimitMateMRightMouse
imap <buffer> <LeftMouse> <Plug>delimitMateMLeftMouse
imap <buffer> <S-Up> <Plug>delimitMateS-Up
imap <buffer> <S-Down> <Plug>delimitMateS-Down
imap <buffer> <PageDown> <Plug>delimitMatePageDown
imap <buffer> <PageUp> <Plug>delimitMatePageUp
imap <buffer> <C-Right> <Plug>delimitMateC-Right
imap <buffer> <C-Left> <Plug>delimitMateC-Left
imap <buffer> <End> <Plug>delimitMateEnd
imap <buffer> <Home> <Plug>delimitMateHome
imap <buffer> <Del> <Plug>delimitMateDel
imap <buffer> <S-BS> <Plug>delimitMateS-BS
imap <buffer> <BS> <Plug>delimitMateBS
inoremap <buffer> <Plug>delimitMateJumpMany =len(b:_l_delimitMate_buffer) ? delimitMate#Finish(0) : delimitMate#JumpMany()
imap <buffer> <C-ScrollWheelRight> <Plug>delimitMateC-ScrollWheelRight
imap <buffer> <S-ScrollWheelRight> <Plug>delimitMateS-ScrollWheelRight
imap <buffer> <ScrollWheelRight> <Plug>delimitMateScrollWheelRight
imap <buffer> <C-ScrollWheelLeft> <Plug>delimitMateC-ScrollWheelLeft
imap <buffer> <S-ScrollWheelLeft> <Plug>delimitMateS-ScrollWheelLeft
imap <buffer> <ScrollWheelLeft> <Plug>delimitMateScrollWheelLeft
imap <buffer> <C-ScrollWheelDown> <Plug>delimitMateC-ScrollWheelDown
imap <buffer> <S-ScrollWheelDown> <Plug>delimitMateS-ScrollWheelDown
imap <buffer> <ScrollWheelDown> <Plug>delimitMateScrollWheelDown
imap <buffer> <C-ScrollWheelUp> <Plug>delimitMateC-ScrollWheelUp
imap <buffer> <S-ScrollWheelUp> <Plug>delimitMateS-ScrollWheelUp
imap <buffer> <ScrollWheelUp> <Plug>delimitMateScrollWheelUp
imap <buffer> <silent> g <Plug>delimitMateJumpMany
imap <buffer> " <Plug>delimitMate"
imap <buffer> ' <Plug>delimitMate'
imap <buffer> ( <Plug>delimitMate(
imap <buffer> ) <Plug>delimitMate)
imap <buffer> [ <Plug>delimitMate[
imap <buffer> ] <Plug>delimitMate]
imap <buffer> ` <Plug>delimitMate`
imap <buffer> { <Plug>delimitMate{
imap <buffer> } <Plug>delimitMate}
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal nobuflisted
setlocal buftype=help
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=>4
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=nc
setlocal conceallevel=2
setlocal completefunc=
setlocal copyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'help'
setlocal filetype=help
endif
setlocal foldcolumn=0
setlocal nofoldenable
setlocal foldexpr=0
setlocal foldignore=#
set foldlevel=5
setlocal foldlevel=5
setlocal foldmarker={{{,}}}
set foldmethod=syntax
setlocal foldmethod=syntax
setlocal foldminlines=1
set foldnestmax=2
setlocal foldnestmax=2
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcroql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=!-~,^*,^|,^\",192-255
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
setlocal nonumber
set numberwidth=5
setlocal numberwidth=5
setlocal omnifunc=
setlocal path=
setlocal preserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal readonly
set relativenumber
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=pl,en
setlocal statusline=%!Powerline(2)
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'help'
setlocal syntax=help
endif
setlocal tabstop=8
setlocal tags=~/.vim/bundle/vim-startify/.git/tags,tags;/
setlocal textwidth=78
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 77 - ((67 * winheight(0) + 36) / 73)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
77
normal! 0
wincmd w
2wincmd w
exe 'vert 1resize ' . ((&columns * 82 + 93) / 186)
exe 'vert 2resize ' . ((&columns * 103 + 93) / 186)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=20 winwidth=75 shortmess=atI
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
