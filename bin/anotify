#!/usr/bin/env bash

# Functions {{{

show_help() {
    HELP_MSG="Usage: $0 [-hmwes] <MESSAGE>

Shows a notification in awesome window manager using the naughty library.
Supports multiple types of notices, dependent on switch used:

    -h - This help message.
    -w - Notification is a warning.
    -e - Notification is an error
    -s - Notification is a syslog message. It receives input through stdin.
    -t <TIMEOUT> - Optional message timeout in seconds.
    -m <SENDER>  - Mail message notification."

    echo "${HELP_MSG}"
}

awesome_notification() {
    # compose the notification
    COMMAND="require('naughty').notify({ \
            title = ${TITLE}, \
            text = ${TEXT}, \
            timeout = ${TIMEOUT}, \
            screen = 1, \
            bg = \"${BG_COLOR}\", \
            fg = \"${FG_COLOR}\", \
            margin = 8, \
            width = 500, \
            run = function () run_or_raise(
                                \"${EXECUTE}\",
                                { name = \"${CLASS}\" }
                ) end
            })"
    # send it to awesome
    echo $COMMAND | awesome-client
}

# }}}
# Variables {{{

# get the damned date as soon as possible
TSTAMP=$(date +"%Y/%m/%d %H:%M:%S") # get time of completion

# default notificaiton color
BG_COLOR="#417c9d"
FG_COLOR="#ffffff"

# don't timeout notifications
TIMEOUT=0

# }}}
# Options {{{

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
output_file=""
verbose=0

while getopts "h?m:t:wesp" opt; do
    case "$opt" in
        h|\?)
            show_help
            exit 0
            ;;
        m)  EMAIL=1
            BG_COLOR="#2f8a2c"
            SENDER=$OPTARG
            ;;
        t)  TIMEOUT=$OPTARG
            ;;
        w)  WARNING=1
            BG_COLOR="#a7580b"
            ;;
        e)  ERROR=1
            BG_COLOR="#ba3624"
            ;;
        s)  SYSLOG=1
            BG_COLOR="#a44500"
            ;;
        p)  PASS=1
            TIMEOUT=45
            BG_COLOR="#f3be08"
            FG_COLOR="#000000"
            ;;
    esac
done

shift $((OPTIND-1))
if [[ -n "$@" ]]; then
    MESSAGE=$@  # get all arguments as the message for this notifiaction
else
    MESSAGE=$(cat)
fi

echo "--------------"
echo "$MESSAGE"
echo "--------------"

# }}}
# Main Script {{{

# this formatting with tabs is retarded but I have no better idea
if [[ $EMAIL ]] ; then
    TITLE="\"E-Mail \t\t\t${TSTAMP}\""
    TEXT="\"Sender: ${SENDER}\" .. newline .. \"Subject: ${MESSAGE}\""
    CLASS="*Thunderbird"
elif [[ $ERROR ]] ; then
    TITLE="\"ERROR  \t\t\t${TSTAMP}\""
    TEXT="\"${MESSAGE}\""
elif [[ $WARNING ]] ; then
    TITLE="\"WARNING\t\t\t${TSTAMP}\""
    TEXT="\"${MESSAGE}\""
elif [[ $PASS ]] ; then
    # replace real newline with lua newline
    MESSAGE=$(echo "$MESSAGE" | sed ':a;N;$!ba;s/\n/\" .. newline .. \"/g')
    TITLE="\"Pass\t\t\t\t\tWill expire in: ${TIMEOUT}s\""
    TEXT="\"${MESSAGE}\""
elif [[ $SYSLOG ]] ; then
    SYSLOG_INFO=$(cat)
    PRIORITY=$(echo "${SYSLOG_INFO}" | cut -d'|' -f1)
    HOST=$(echo "${SYSLOG_INFO}" | cut -d'|' -f2)
    PROGRAM=$(echo "${SYSLOG_INFO}" | cut -d'|' -f3)
    PID=$(echo "${SYSLOG_INFO}" | cut -d'|' -f4)
    MESSAGE=$(echo "${SYSLOG_INFO}" | cut -d'|' -f5)

    TITLE="\"Syslog [${PRIORITY}]\t\t\t${TSTAMP}\""
    TEXT="\"Host: ${HOST}\t\tProgram: ${PROGRAM}\t\tPID: ${PID}\" .. newline .. \"${MESSAGE}\""

    # raise or run mmtail to check out DEM logs
    EXECUTE="mmtail"
    CLASS="mmtail"
else
    TITLE="\"NOTE\t\t\t$TSTAMP\""
    TEXT="\"${MESSAGE}\""
fi

awesome_notification 
# }}}
