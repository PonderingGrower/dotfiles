#!/usr/bin/env bash

set -e

# force overriding files
if [[ $1 == '-f' ]]; then
    FORCE=1
fi

# Find location of repo
SCRIPT_DIR=$(dirname $(readlink -f "$0"))
cd "$SCRIPT_DIR"
GIT_ROOT=$(git rev-parse --show-toplevel)
cd - > /dev/null

# Load submodules
cd "$GIT_ROOT"
git submodule update --init --recursive
cd - > /dev/null

# Find files to symlink
CONFIG_FILES="bin .gnupg/gpg.conf .gnupg/gpg-agent.conf"
CONFIG_FILES+=$(find "$GIT_ROOT" -regextype posix-extended -maxdepth 1 -name '.*' -not -regex '.*\.(git|gitignore|gnupg)' -printf "%P\n")
CONFIG_FILES+=" "
CONFIG_FILES+=$(find "$GIT_ROOT/.config" -maxdepth 1 -printf "%P\n" | sed -e 1d -e 's/^/.config\//')

NO_CHANGES=1

for CONFIG_FILE in ${CONFIG_FILES}; do
    SOURCE="${GIT_ROOT}/${CONFIG_FILE}" 
    DEST="${HOME}/${CONFIG_FILE}"
    DEST_DIR=$(dirname "${DEST}")
    if [[ ! -d "${DEST_DIR}" ]]; then
        mkdir -p "${DEST_DIR}"
    fi
    if [[ ${FORCE} ]]; then
        echo "FORCE LINKING: ${SOURCE} -> ${DEST}" >&2
        ln -sf "${SOURCE}" "${DEST}"
    elif [[ -f "${DEST}" ]]; then
        echo "IS_FILE: ${DEST}" >&2
    elif [[ -d "${DEST}" ]]; then
        echo "IS_DIR:  ${DEST}" >&2
    elif [[ -h "${DEST}" ]]; then
        echo "SYMLINK: ${DEST}" >&2
    else # symlinking withou forcing
        NO_CHANGES=0
        echo "LINKING: ${SOURCE} -> ${DEST}" >&2
        ln -s "${SOURCE}" "${DEST}"
    fi
done

if [[ ${NO_CHANGES} ]]; then
    echo "No changes necessary."
fi
